{"version":3,"file":"pomskyTestWorker-86e4469a.js","sources":["../src/editors/pomskyTestWorker.ts"],"sourcesContent":["import type {\n  PomskyTestCapture,\n  PomskyTestMatch,\n  PomskyTestMatchAll,\n  PomskyTestReject,\n} from '@pomsky-lang/compiler-web'\nimport type { Diagnostic } from './pomskySupport'\nimport type { TestMessage } from './workers'\n\nself.onmessage = ({ data }: MessageEvent<TestMessage>) => {\n  try {\n    const output = runTests(data)\n    self.postMessage({ output })\n  } catch (e) {\n    self.postMessage({ error: e instanceof Error ? e.message : 'Testing failed or timed out' })\n  }\n}\n\nconst severityError = 8\n\nfunction runTests({ input, output, tests }: TestMessage): Diagnostic[] {\n  if (tests.length === 0) return []\n\n  const globalRegex = new RegExp(output, 'gu')\n  const stickyRegex = new RegExp(output, 'yu')\n\n  const errors: Diagnostic[] = []\n  for (const test of tests) {\n    globalRegex.lastIndex = 0\n    stickyRegex.lastIndex = 0\n\n    if ('match' in test) {\n      checkSingleMatch(input, stickyRegex, test.match, errors)\n    } else if ('matchAll' in test) {\n      checkMultiMatch(input, globalRegex, test.matchAll, errors)\n    } else {\n      checkReject(input, test.reject.asSubstring ? globalRegex : stickyRegex, test.reject, errors)\n    }\n  }\n  return errors\n}\n\nfunction checkSingleMatch(\n  input: string,\n  regex: RegExp,\n  { literal, range, captures }: PomskyTestMatch,\n  errors: Diagnostic[],\n) {\n  const res = regex.exec(literal)\n  if (res != null && res[0].length === literal.length) {\n    checkCaptures(input, res, captures, errors)\n  } else {\n    errors.push({\n      severity: severityError,\n      ...convertRange(input, range),\n      message: `Expression does not exactly match the string '${literal}`,\n      title: 'No exact match',\n      help:\n        res != null\n          ? `Expression matches a substring '${res[0]}', but not the entire string`\n          : undefined,\n      code: 'test',\n    })\n  }\n}\n\nfunction checkMultiMatch(\n  input: string,\n  regex: RegExp,\n  { literal, matches, range }: PomskyTestMatchAll,\n  errors: Diagnostic[],\n) {\n  const results: RegExpExecArray[] = []\n  let _res: RegExpExecArray | null\n  let prevLastIndex = 0\n\n  while ((_res = regex.exec(literal)) != null) {\n    results.push(_res)\n    if (regex.lastIndex === prevLastIndex) {\n      regex.lastIndex++\n    }\n    prevLastIndex = regex.lastIndex\n  }\n\n  if (matches.length === 0 && results.length > 0) {\n    return\n  }\n\n  const minNumber = Math.min(matches.length, results.length)\n\n  for (let i = 0; i < minNumber; i++) {\n    const result = results[i]\n    const match = matches[i]\n    if (result[0] === match.literal) {\n      checkCaptures(input, result, match.captures, errors)\n    } else {\n      errors.push({\n        severity: severityError,\n        ...convertRange(input, match.range),\n        message: `Match #${i} is '${result[0]}', but expected '${match.literal}`,\n        title: 'Incorrect match',\n        code: 'test',\n      })\n    }\n  }\n\n  if (results.length !== matches.length) {\n    errors.push({\n      severity: severityError,\n      ...convertRange(input, range),\n      message: `There are ${results.length} matches, but ${matches.length} matches were expected`,\n      title: 'Wrong number of matches',\n      code: 'test',\n    })\n  }\n}\n\nfunction checkReject(\n  input: string,\n  regex: RegExp,\n  { literal, range, asSubstring }: PomskyTestReject,\n  errors: Diagnostic[],\n) {\n  const res = regex.exec(literal)\n  if (res == null || (!asSubstring && res[0].length !== literal.length)) {\n    return\n  }\n\n  errors.push({\n    severity: severityError,\n    ...convertRange(input, range),\n    message: asSubstring\n      ? `Expression matches the substring '${literal}', but was not supposed to match`\n      : `Expression matches exactly, but was not supposed to match`,\n    title: 'Unexpected match',\n    code: 'test',\n  })\n}\n\nfunction checkCaptures(\n  input: string,\n  res: RegExpExecArray,\n  captures: PomskyTestCapture[],\n  errors: Diagnostic[],\n) {\n  captures.forEach(({ ident, identRange, literal, range }) => {\n    const found = typeof ident === 'number' ? res[ident] : res.groups?.[ident]\n    if (found === undefined) {\n      errors.push({\n        severity: severityError,\n        ...convertRange(input, identRange),\n        message: `Match does not have capturing group '${ident}'`,\n        title: 'Missing capturing group',\n        code: 'test',\n      })\n    } else if (found !== literal) {\n      errors.push({\n        severity: severityError,\n        ...convertRange(input, range),\n        message: `Capturing group '${ident}' matched the text '${found}', but was expected to match '${literal}'`,\n        title: 'Wrong capturing group content',\n        code: 'test',\n      })\n    }\n  })\n}\n\n// Copied from ./convertRange.ts\nfunction convertRange(\n  input: string,\n  [start, end]: [number, number],\n): { startColumn: number; startLineNumber: number; endColumn: number; endLineNumber: number } {\n  const lines1 = input.slice(0, start).split('\\n')\n  const lines2 = input.slice(start, end).split('\\n')\n  const last1 = lines1[lines1.length - 1] ?? ''\n  const last2 = lines2[lines2.length - 1] ?? ''\n  const start1 = last1.length + 1\n  const start2 = lines2.length > 1 ? last2.length + 1 : last2.length + start1\n\n  return {\n    startColumn: start1,\n    startLineNumber: lines1.length,\n    endColumn: start2,\n    endLineNumber: lines1.length + lines2.length - 1,\n  }\n}\n"],"names":["data","output","runTests","e","severityError","input","tests","globalRegex","stickyRegex","errors","test","checkSingleMatch","checkMultiMatch","checkReject","regex","literal","range","captures","res","checkCaptures","convertRange","matches","results","_res","prevLastIndex","minNumber","i","result","match","asSubstring","ident","identRange","found","_a","start","end","lines1","lines2","last1","last2","start1","start2"],"mappings":"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"}